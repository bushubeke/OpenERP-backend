import os
import ssl
from pydantic import BaseSettings
from kombu import Queue, Exchange
from dotenv import load_dotenv

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(BASE_DIR, '.env'))


class Settings(BaseSettings):
    SQLITE_SYNC_URL_PREFIX: str = os.getenv("SQLITE_SYNC_URL_PREFIX")
    SQLITE_ASYNC_URL_PREFIX: str = os.getenv("SQLITE_ASYNC_URL_PREFIX")
    SECRET_KEY: str = os.getenv("SECRET_KEY")
    JWT_APP_TOKEN_EXPIRE_TIME: int = 4
    JWT_REFRESH_TOKEN_EXPIRE_TIME: int = 5
    DEBUG: bool = False

    MAIL_SERVER: str = 'smtp.aol.com'
    MAIL_USERNAME: str = os.getenv('MAIL_USERNAME')
    MAIL_PASSWORD: str = os.getenv('MAIL_PASSWORD')
    MAIL_DEFAULT_SENDER: str = os.getenv('MAIL_DEFAULT_SENDER')
    MAIL_PORT: int = 587
    MAIL_USE_SSL: bool = False
    MAIL_USE_TLS: bool = True
    MAIL_MAX_EMAILS: int = 500

    class Config:
        env_file = ".env"


class BaseCelery(BaseSettings):
    CELERY_BROKER_URL: str = os.environ.get("CELERY_Broker_URL")
    RESULT_BACKEND: str =os.environ.get("RESULT_BACKEND")
    CELERY_TASK_QUEUES: list = (
        # default queue
        Queue("celery", Exchange('celery', type='direct'), routing_key='default'),
        Queue("opencelery", Exchange('opencelery', type='direct'), routing_key='opencelery'),
        Queue('useradmin', Exchange('useradmin', type='direct'), routing_key='useradmin')

    )
    BROKER_USE_SSL = {
        'keyfile': '/var/ssl/private/worker-key.pem',
        'certfile': '/var/ssl/amqp-server-cert.pem',
        'ca_certs': '/var/ssl/myca.pem',
        'cert_reqs': ssl.CERT_REQUIRED
    }

settings = Settings()
celeryconf = BaseCelery().dict()
